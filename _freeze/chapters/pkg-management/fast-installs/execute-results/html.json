{
  "hash": "f5a75896ca55845bc1813db47ed721e8",
  "result": {
    "markdown": "# Faster Package Installs\n\nYou may have noticed that when installing packages in the notebook it can take a while. It could be minutes, hours in extreme cases, to install the suite of packages your project requires. This is especially tedious if you need to do this every time a job runs, or each morning when your cluster is started.\n\nClusters are ephemeral and by default have no persistent storage, therefore installed packages will not be available on restart.\n\nBy default Databricks installs packages from [CRAN](https://cran.r-project.org/). CRAN does not provide pre-compiled binaries for Linux (Databricks clusters' underlying virtual machines are Linux, Ubuntu specifically).\n\n[Posit](https://posit.co/) to save the day! [Posit provides a public package manager](https://packagemanager.posit.co/) that has all packages from CRAN (and [Bioconductor](https://www.bioconductor.org/)!). There is a [helpful wizard](https://packagemanager.posit.co/client/#/repos/cran/setup?r_environment=other) to get started.\n\nWith our new found knowledge we can make installing R packages within Databricks significantly faster. There are multiple ways to solve this, each differing slightly, but fundamentally the same.\n\n## Setting Repo within Notebook\n\nThe quickest method is to follow the [wizard](https://packagemanager.posit.co/client/#/repos/cran/setup?r_environment=other) and adjust the `repos` option:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# need to set the user agent string otherwise installs will be slow\n# e.g. selecting Ubuntu 22.04 in wizard \noptions(\n  HTTPUserAgent = sprintf(\"R/%s R (%s)\", getRversion(), paste(getRversion(), R.version[\"platform\"], R.version[\"arch\"], R.version[\"os\"])),\n  repos = \"https://packagemanager.posit.co/cran/__linux__/jammy/latest\"\n)\n```\n:::\n\n\nThis works well but not all versions of the [Databricks Runtime](https://www.databricks.com/glossary/what-is-databricks-runtime) use the same version of Ubuntu.\n\nIt's easier to detect the Ubuntu [release code name](https://wiki.ubuntu.com/DevelopmentCodeNames) dynamically:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrelease <- system(\"lsb_release -c --short\", intern = T) # <1>\n\n# need to set the user agent string otherwise installs will be slow\noptions(\n  HTTPUserAgent = sprintf(\"R/%s R (%s)\", getRversion(), paste(getRversion(), R.version[\"platform\"], R.version[\"arch\"], R.version[\"os\"])),\n  repos = paste0(\"https://packagemanager.posit.co/cran/__linux__/\", release, \"/latest\")\n)\n```\n:::\n\n\n1.  `system` is used to run the command to retrieve the release code name\n\nThe downside of this method is that it requires every notebook to adjust the `repos` and `HTTPUserAgent` options.\n\n## Cluster Environment Variable & Init Script\n\nDatabricks clusters allow specification of [environment variables](https://docs.databricks.com/en/compute/configure.html#environment-variables), there is a specific variable (`DATABRICKS_DEFAULT_R_REPOS`) that can be set to adjust the default repository for the entire cluster.\n\nYou can again refer to the [wizard](https://packagemanager.posit.co/client/#/repos/cran/setup?r_environment=other), the environment variables section of cluster should be:\n\n\n::: {.cell}\n\n```{.sh .cell-code}\nDATABRICKS_DEFAULT_R_REPOS=<posit-package-manager-url-goes-here>\n```\n:::\n\n\nUnfortunately this isn't as dynamic as the first option and you still need to set the `HTTPUserAgent` in [`.Rprofile.site`](https://support.posit.co/hc/en-us/articles/360047157094-Managing-R-with-Rprofile-Renviron-Rprofile-site-Renviron-site-rsession-conf-and-repos-conf) via an [init script](https://docs.databricks.com/en/init-scripts/index.html).\n\nThe init script will be:\n\n\n::: {.cell}\n\n```{.sh .cell-code}\n#!/bin/bash\n# Append changes to .Rprofile.site\ncat <<EOF >> \"/etc/R/Rprofile.site\"\noptions(\n  HTTPUserAgent = sprintf(\"R/%s R (%s)\", getRversion(), paste(getRversion(), R.version[\"platform\"], R.version[\"arch\"], R.version[\"os\"]))\n)\nEOF\n```\n:::\n\n\n::: callout-important\nDue to how Databricks starts up the R shell for notebook sessions it's not straightforward to adjust the `repos` option in an init script alone.\n\n`DATABRICKS_DEFAULT_R_REPOS` is referenced as part of the startup process *after* `.Rprofile.site` is executed and therefore will override any earlier attempt to adjust `repos`.\n\nTherefore you'll need to use both the init script and the environment variable configuration.\n:::\n\n## Setting Repo for Cluster Library\n\n::: callout-note\nSimilar to setting `DATABRICKS_DEFAULT_R_REPOS` this requires the `HTTPUserAgent` also to be set and it's unlikely to be helpful other than for it's purpose of installing a package to make it available for all cluster users.\n:::\n\n[Cluster libraries](https://docs.databricks.com/en/libraries/cluster-libraries.html) can install R packages and support specification of the repository.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}